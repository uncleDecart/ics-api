// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// BinaryBlob Binary blobs (or artifacts) are the files exposed to app
// instance through patch envelope. They are treated as files, each entry
// contains artifact name, it's SHA and size, metadata related to file, user info.
// Also it has URL to download this file.
type BinaryBlob struct {
	// ArtifactMetaData base64-encoded generic metadata, i.e. user info, description, etc.
	ArtifactMetaData *string `json:"artifactMetaData,omitempty"`

	// FileMetaData base64-encoded metadata related to file, i.e. env variables, cli arguments
	FileMetaData *string `json:"fileMetaData,omitempty"`

	// FileName Name of binary artifact
	FileName *string `json:"fileName,omitempty"`

	// FileSha SHA-256 of the binary artifact
	FileSha *string `json:"fileSha,omitempty"`

	// Size size of binary artifact in bytes
	Size *int `json:"size,omitempty"`

	// Url URL to download this binary artifact
	Url *string `json:"url,omitempty"`
}

// OpaqueStatus Opaque status to send back to controller
type OpaqueStatus struct {
	Status *[]byte `json:"status,omitempty"`
}

// PatchEnvelopeDescription Patch envelope contains of artifacts (binary blobs) which could be
// anything you want (configuration files, binary executables, dynamic libraries, etc.)
type PatchEnvelopeDescription struct {
	BinaryBlobs *[]BinaryBlob `json:"BinaryBlobs,omitempty"`

	// PatchID Unique identifier of patch envelope
	PatchID *string `json:"PatchID,omitempty"`

	// Version Version of patch envelope
	Version *string `json:"Version,omitempty"`
}

// PostOpaqueStatusJSONRequestBody defines body for PostOpaqueStatus for application/json ContentType.
type PostOpaqueStatusJSONRequestBody = OpaqueStatus

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostOpaqueStatusWithBody request with any body
	PostOpaqueStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOpaqueStatus(ctx context.Context, body PostOpaqueStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAvailablePatchEnvelopes request
	GetAvailablePatchEnvelopes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPatchArchive request
	DownloadPatchArchive(ctx context.Context, patchID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPatchArchiveFile request
	DownloadPatchArchiveFile(ctx context.Context, patchID string, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostOpaqueStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOpaqueStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOpaqueStatus(ctx context.Context, body PostOpaqueStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOpaqueStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAvailablePatchEnvelopes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailablePatchEnvelopesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPatchArchive(ctx context.Context, patchID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPatchArchiveRequest(c.Server, patchID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPatchArchiveFile(ctx context.Context, patchID string, artifactName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPatchArchiveFileRequest(c.Server, patchID, artifactName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostOpaqueStatusRequest calls the generic PostOpaqueStatus builder with application/json body
func NewPostOpaqueStatusRequest(server string, body PostOpaqueStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOpaqueStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOpaqueStatusRequestWithBody generates requests for PostOpaqueStatus with any type of body
func NewPostOpaqueStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app/appCustomStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAvailablePatchEnvelopesRequest generates requests for GetAvailablePatchEnvelopes
func NewGetAvailablePatchEnvelopesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/description.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPatchArchiveRequest generates requests for DownloadPatchArchive
func NewDownloadPatchArchiveRequest(server string, patchID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patchID", runtime.ParamLocationPath, patchID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/download/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPatchArchiveFileRequest generates requests for DownloadPatchArchiveFile
func NewDownloadPatchArchiveFileRequest(server string, patchID string, artifactName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "patchID", runtime.ParamLocationPath, patchID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "artifactName", runtime.ParamLocationPath, artifactName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/patch/download/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostOpaqueStatusWithBodyWithResponse request with any body
	PostOpaqueStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOpaqueStatusResponse, error)

	PostOpaqueStatusWithResponse(ctx context.Context, body PostOpaqueStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOpaqueStatusResponse, error)

	// GetAvailablePatchEnvelopesWithResponse request
	GetAvailablePatchEnvelopesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAvailablePatchEnvelopesResponse, error)

	// DownloadPatchArchiveWithResponse request
	DownloadPatchArchiveWithResponse(ctx context.Context, patchID string, reqEditors ...RequestEditorFn) (*DownloadPatchArchiveResponse, error)

	// DownloadPatchArchiveFileWithResponse request
	DownloadPatchArchiveFileWithResponse(ctx context.Context, patchID string, artifactName string, reqEditors ...RequestEditorFn) (*DownloadPatchArchiveFileResponse, error)
}

type PostOpaqueStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOpaqueStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOpaqueStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAvailablePatchEnvelopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PatchEnvelopeDescription
}

// Status returns HTTPResponse.Status
func (r GetAvailablePatchEnvelopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailablePatchEnvelopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPatchArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadPatchArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPatchArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPatchArchiveFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DownloadPatchArchiveFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPatchArchiveFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostOpaqueStatusWithBodyWithResponse request with arbitrary body returning *PostOpaqueStatusResponse
func (c *ClientWithResponses) PostOpaqueStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOpaqueStatusResponse, error) {
	rsp, err := c.PostOpaqueStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOpaqueStatusResponse(rsp)
}

func (c *ClientWithResponses) PostOpaqueStatusWithResponse(ctx context.Context, body PostOpaqueStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOpaqueStatusResponse, error) {
	rsp, err := c.PostOpaqueStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOpaqueStatusResponse(rsp)
}

// GetAvailablePatchEnvelopesWithResponse request returning *GetAvailablePatchEnvelopesResponse
func (c *ClientWithResponses) GetAvailablePatchEnvelopesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAvailablePatchEnvelopesResponse, error) {
	rsp, err := c.GetAvailablePatchEnvelopes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailablePatchEnvelopesResponse(rsp)
}

// DownloadPatchArchiveWithResponse request returning *DownloadPatchArchiveResponse
func (c *ClientWithResponses) DownloadPatchArchiveWithResponse(ctx context.Context, patchID string, reqEditors ...RequestEditorFn) (*DownloadPatchArchiveResponse, error) {
	rsp, err := c.DownloadPatchArchive(ctx, patchID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPatchArchiveResponse(rsp)
}

// DownloadPatchArchiveFileWithResponse request returning *DownloadPatchArchiveFileResponse
func (c *ClientWithResponses) DownloadPatchArchiveFileWithResponse(ctx context.Context, patchID string, artifactName string, reqEditors ...RequestEditorFn) (*DownloadPatchArchiveFileResponse, error) {
	rsp, err := c.DownloadPatchArchiveFile(ctx, patchID, artifactName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPatchArchiveFileResponse(rsp)
}

// ParsePostOpaqueStatusResponse parses an HTTP response from a PostOpaqueStatusWithResponse call
func ParsePostOpaqueStatusResponse(rsp *http.Response) (*PostOpaqueStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOpaqueStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAvailablePatchEnvelopesResponse parses an HTTP response from a GetAvailablePatchEnvelopesWithResponse call
func ParseGetAvailablePatchEnvelopesResponse(rsp *http.Response) (*GetAvailablePatchEnvelopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailablePatchEnvelopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PatchEnvelopeDescription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadPatchArchiveResponse parses an HTTP response from a DownloadPatchArchiveWithResponse call
func ParseDownloadPatchArchiveResponse(rsp *http.Response) (*DownloadPatchArchiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadPatchArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDownloadPatchArchiveFileResponse parses an HTTP response from a DownloadPatchArchiveFileWithResponse call
func ParseDownloadPatchArchiveFileResponse(rsp *http.Response) (*DownloadPatchArchiveFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadPatchArchiveFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
